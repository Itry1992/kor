<?xml version="1.0" encoding="UTF-8"?>
<!--
scan：当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。
scanPeriod：设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒当scan为true时，此属性生效。默认的时间间隔为1分钟。
debug：当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。
-->
<configuration debug="false">
    <!--logback启动时，会打印它检查了哪些配置、看见了哪些配置，这些信息有时是必须关掉的-->
    <statusListener class="com.tongtech.logback.core.status.NopStatusListener" />
    <!--定义日志文件的存储地址 -->
    <define name="loggingDir" class="com.tongtech.client.log.DefineDir" />
    <define name="logLevel" class="com.tongtech.client.log.LogLevel" />
    <!--
       日志输出格式：%d表示日期时间，%thread表示线程名，%-5level：级别从左显示5个字符宽度
       %logger{50} 表示logger名字最长50个字符，否则按照句点分割。 %msg：日志消息，%n是换行符
   -->
    <property name="system.pattern" value="%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n" />
    <!-- 控制台输出 -->
    <appender name="STDOUT" class="com.tongtech.logback.core.ConsoleAppender">
        <layout class="com.tongtech.logback.classic.PatternLayout">

            <pattern>${system.pattern}</pattern>
        </layout>
    </appender>
    <!-- 滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到文件中 -->
    <appender name="FILE"  class="com.tongtech.logback.core.rolling.RollingFileAppender">
        <rollingPolicy class="com.tongtech.logback.core.rolling.TimeBasedRollingPolicy">
            <!--
              滚动时产生的文件的存放位置及文件名称 %d{yyyy-MM-dd}：按天进行日志滚动
            %i：当文件大小超过maxFileSize时，按照i进行文件滚动
            -->
            <FileNamePattern>${loggingDir}/client.log.%d{yyyy-MM-dd}-%i.log</FileNamePattern>
            <!--
              可选节点，控制保留的归档文件的最大数量，超出数量就删除旧文件。假设设置每天滚动，
              且maxHistory是7，则只保存最近7天的文件，删除之前的旧文件。注意，删除旧文件是，
              那些为了归档而创建的目录也会被删除。
              -->
            <MaxHistory>7</MaxHistory>
            <!--
                当日志文件超过maxFileSize指定的大小是，根据上面提到的%i进行日志文件滚动
                 注意此处配置SizeBasedTriggeringPolicy是无法实现按文件大小进行滚动的，
                 必须配置timeBasedFileNamingAndTriggeringPolicy
              -->
            <TimeBasedFileNamingAndTriggeringPolicy class="com.tongtech.logback.core.rolling.SizeAndTimeBasedFNATP">
                <MaxFileSize>10MB</MaxFileSize>
            </TimeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
        <!--
        日志输出格式：%d表示日期时间，%thread表示线程名，%-5level：级别从左显示5个字符宽度 %logger{50} 表示logger名字最长50个字符，否则按照句点分割。 %msg：日志消息，%n是换行符
        -->
        <layout class="com.tongtech.logback.classic.PatternLayout">
            <pattern>${system.pattern}</pattern>
        </layout>

        <!--日志文件最大的大小-->
<!--        <triggeringPolicy class="com.tongtech.logback.core.rolling.SizeBasedTriggeringPolicy">-->
<!--            <MaxFileSize>1MB</MaxFileSize>-->
<!--        </triggeringPolicy>-->
    </appender>

    <!--
      logger主要用于存放日志对象，也可以定义日志类型、级别
      name：表示匹配的logger类型前缀，也就是包的前半部分
      level：要记录的日志级别，包括 TRACE < DEBUG < INFO < WARN < ERROR
      additivity：作用在于children-logger是否使用 rootLogger配置的appender进行输出，false：表示只用当前logger的appender-ref，true：表示当前logger的appender-ref和rootLogger的appender-ref都有效
      -->
    <!--关闭某个package下的日志-->
    <logger name="com.tongtech.client" level="${logLevel}"/>

    <!-- 日志输出级别【TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF】 -->
    <root level="TRACE">
        <appender-ref ref="STDOUT" />
        <appender-ref ref="FILE" />
    </root>
</configuration>
